// <auto-generated />
using System;
using MbDevelopment.Greenmaster.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MbDevelopment.Greenmaster.DataAccess.Migrations
{
    [DbContext(typeof(BotanicalContext))]
    partial class BotanicalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PhylumId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PhylumId");

                    b.ToTable("Taxonomy.Classes");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Taxonomy.Families");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonGenus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Taxonomy.Genera");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonKingdom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Taxonomy.Kingdoms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8925789d-2a37-4b86-89ba-657184ca4e33"),
                            Description = "The kingdom of animals.",
                            LatinName = "Animalia"
                        },
                        new
                        {
                            Id = new Guid("0d68e396-d131-40c0-b89c-cc8ecd9b67dc"),
                            Description = "The kingdom of plants.",
                            LatinName = "Plantae"
                        },
                        new
                        {
                            Id = new Guid("38d1cc00-9f59-472a-9f84-323e18ecc968"),
                            Description = "The kingdom of fungi.",
                            LatinName = "Fungi"
                        },
                        new
                        {
                            Id = new Guid("045abec7-aa1f-42f9-b14a-a099ca597041"),
                            Description = "The kingdom of protista.",
                            LatinName = "Protista"
                        });
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Taxonomy.Orders");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonPhylum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxonKingdomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaxonKingdomId");

                    b.ToTable("Taxonomy.Phyla");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cultivar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.ToTable("Taxonomy.Species");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonClass", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonPhylum", "Phylum")
                        .WithMany("RelatedClasses")
                        .HasForeignKey("PhylumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phylum");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonFamily", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonOrder", "Order")
                        .WithMany("RelatedFamilies")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonGenus", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonFamily", "Family")
                        .WithMany("RelatedGenera")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonOrder", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonClass", "Class")
                        .WithMany("RelatedOrders")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonPhylum", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonKingdom", "Kingdom")
                        .WithMany("RelatedPhyla")
                        .HasForeignKey("TaxonKingdomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kingdom");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonSpecies", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonGenus", "Genus")
                        .WithMany("RelatedSpecies")
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genus");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonClass", b =>
                {
                    b.Navigation("RelatedOrders");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonFamily", b =>
                {
                    b.Navigation("RelatedGenera");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonGenus", b =>
                {
                    b.Navigation("RelatedSpecies");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonKingdom", b =>
                {
                    b.Navigation("RelatedPhyla");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonOrder", b =>
                {
                    b.Navigation("RelatedFamilies");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonPhylum", b =>
                {
                    b.Navigation("RelatedClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
